{"version":3,"sources":["components/pixi/Viewport.tsx","components/pixi/Marker.tsx","images/ui/check.svg","components/SituationModal.tsx","components/SituationOrder.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Viewport","React","forwardRef","props","ref","app","useApp","cursor","process","renderer","plugins","interaction","cursorStyles","pointer","PixiComponentViewport","PixiComponent","create","viewport","PixiViewport","screenWidth","screenHeight","worldWidth","worldHeight","ticker","drag","pinch","wheel","clamp","direction","clampZoom","minScale","maxScale","decelerate","PixiPlugin","registerPIXI","PIXI","gsap","registerPlugin","Marker","useRef","data","useState","position","setPosition","useEffect","from","current","duration","ease","pixi","visible","scale","delay","onDragStart","event","stopPropagation","onDragEnd","undefined","console","log","onDragMove","newPosition","getLocalPosition","parent","anchor","interactive","image","mousedown","touchstart","mouseup","mouseupoutside","mousemove","touchmove","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","_ref2","createElement","type","_ref3","_ref4","id","className","points","_ref","svgRef","title","x","y","width","height","viewBox","style","enableBackground","xmlSpace","ForwardRef","SituationModal","situationId","onClose","onOptionChosen","situation","Situations","selectedOption","selectOption","warningShown","setWarningShown","handleClose","isOpen","ariaHideApp","overlayClassName","onRequestClose","header","onClick","description","options","map","option","index","disabled","SituationOrder","situationOrder","name","App","viewportRef","selectedSituation","selectSituation","setsituationOrder","canvasWidth","setCanvasWidth","canvasHeight","setCanvasHeight","resize","window","screen","addEventListener","removeEventListener","moveCenter","to","blur","renderMarker","some","s","pointerdown","handleMarkerClick","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.76b40e75.chunk.js","sourcesContent":["import React from \"react\";\nimport { Viewport as PixiViewport, ClickEventData } from \"pixi-viewport\";\nimport { PixiComponent, useApp } from \"@inlet/react-pixi\";\n\ninterface Props {\n  children: React.ReactNode;\n  onClick?(event: ClickEventData): void;\n  screenWidth: number,\n  screenHeight: number,\n  worldWidth: number,\n  worldHeight: number,\n}\n\n/** Viewport leverages pixi-viewport to create a pannable map \n * https://davidfig.github.io/pixi-viewport/jsdoc/\n */\nconst Viewport = React.forwardRef<PixiViewport, any>((props, ref) => {\n  const app = useApp();\n  if (app) {\n      // Perhaps this is better moved somewhere else\n      const cursor = `url('${process.env.PUBLIC_URL}/img/cursors/dwarven_gauntlet_extra_6.png'), auto`;\n      app.renderer.plugins.interaction.cursorStyles.pointer = cursor;\n  }\n  return <PixiComponentViewport app={app} {...props} ref={ref} />;  \n})\n\ninterface PixiComponentProps {\n    app: PIXI.Application;\n}\n\nconst PixiComponentViewport = PixiComponent(\"Viewport\", {\n  create: (props: PixiComponentProps & Props) => {\n    const viewport = new PixiViewport({\n      screenWidth: props.screenWidth,\n      screenHeight: props.screenHeight,\n      worldWidth: props.worldWidth,\n      worldHeight: props.worldHeight,\n      ticker: props.app.ticker,\n      interaction: props.app.renderer.plugins.interaction,\n      // the interaction module is important for wheel to work properly when renderer.view is placed or scaled\n    });\n\n    viewport\n      .drag()\n      .pinch()\n      .wheel()\n      .clamp({ direction: 'all' })\n      .clampZoom({ minScale: 1, maxScale: 2 })\n      .decelerate();\n\n    return viewport;\n  },\n});\nexport default Viewport;\n","import React, { useRef, useEffect, useState } from 'react';\nimport { Sprite, useApp } from '@inlet/react-pixi';\nimport * as PIXI from 'pixi.js';\nimport { PixiPlugin } from 'gsap/all';\nimport { gsap } from 'gsap'\n\nPixiPlugin.registerPIXI(PIXI);\ngsap.registerPlugin(PixiPlugin);\n\ninterface Props {\n    position?: PIXI.Point;\n    delay?: number; // Wait this long before showing\n}\n\nconst Marker = (props: Props & React.ComponentProps<typeof Sprite>) => {\n    const ref = useRef<PIXI.Sprite>(null);\n    const app = useApp();\n    const data = useRef<PIXI.interaction.InteractionData>();\n    const [position, setPosition] = useState<PIXI.Point>(props.position || new PIXI.Point());\n\n    useEffect(() => {\n        // Pop in animation!\n        gsap.from(ref.current, { \n          duration: 1,\n          ease: \"elastic.out(2, 0.5)\",\n          pixi: { \n            visible: false,\n            scale: .1, \n          }\n        }).delay(props.delay || 0);\n    }, [props.delay]);\n\n    const onDragStart = (event: PIXI.interaction.InteractionEvent) => {\n        // store a reference to the data\n        // the reason for this is because of multitouch\n        // we want to track the movement of this particular touch\n        data.current = event.data;\n        event.stopPropagation(); // Stop dragging the map!\n    }\n    \n    const onDragEnd = () => {\n        data.current = undefined;\n        console.log(position);\n    }\n    \n    function onDragMove()\n    {\n        if (data.current)\n        {\n            const newPosition = data.current.getLocalPosition(ref.current!.parent);\n            setPosition(newPosition);\n        }\n    }\n    \n    return (\n        <Sprite \n            { ...props }\n            anchor={[0.5, 0.5]}\n            position={position}\n            ref={ref}\n            interactive={true}\n            image={`${process.env.PUBLIC_URL}/images/ui/marker.svg`}\n            mousedown={onDragStart}\n            touchstart={onDragStart}\n            mouseup={onDragEnd}\n            mouseupoutside={onDragEnd}\n            mousemove={onDragMove}\n            touchmove={onDragMove}\n        />\n    );\n}\n\nexport default Marker;","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"style\", {\n  type: \"text/css\"\n}, \"\\n\\t.st0{fill:none;stroke:#3FA548;stroke-width:32;}\\n\");\n\nvar _ref3 = /*#__PURE__*/React.createElement(\"defs\", null);\n\nvar _ref4 = /*#__PURE__*/React.createElement(\"g\", {\n  id: \"Page-1\"\n}, /*#__PURE__*/React.createElement(\"polyline\", {\n  id: \"checkmark\",\n  className: \"st0\",\n  points: \"11.33,88.97 88.95,166.87 244.67,11.32  \"\n}));\n\nvar SvgCheck = function SvgCheck(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    id: \"m-check-mark\",\n    x: \"0px\",\n    y: \"0px\",\n    width: \"255.97px\",\n    height: \"189.51px\",\n    viewBox: \"0 0 255.97 189.51\",\n    style: {\n      enableBackground: \"new 0 0 255.97 189.51\"\n    },\n    xmlSpace: \"preserve\",\n    ref: svgRef\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _ref2, _ref3, _ref4);\n};\n\nvar ForwardRef = React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(SvgCheck, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/check.81786b3c.svg\";\nexport { ForwardRef as ReactComponent };","import React, { useState } from 'react';\nimport Modal from 'react-modal';\nimport Situations from './../content/situations.json';\nimport { ISituations } from '../common/constants';\nimport { ReactComponent as CheckSvg } from './../images/ui/check.svg';\nimport './situationModal.css';\n\ninterface Props {\n  situationId: string;\n  onClose: () => void;\n  onOptionChosen: (option: number) => void;\n}\n\nconst SituationModal = (props: Props) => {\n  const { situationId, onClose, onOptionChosen } = props;\n\n  const situation = (Situations as ISituations)[situationId];\n  const [selectedOption, selectOption] = useState<number | null>(null);\n  const [warningShown, setWarningShown] = useState<boolean>(false);\n\n  const handleClose = () => {\n    onClose();\n  };\n\n  const handleConfirm = () => {\n    onOptionChosen(selectedOption!);\n    onClose();\n  };\n\n  return (\n    <Modal\n      isOpen={situationId !== null}\n      ariaHideApp={false}\n      overlayClassName={\"modal-overlay\"}\n      className={`modal-content ${situationId}`}\n      onRequestClose={() => handleClose()}\n    >\n      { situationId && (\n        <>\n          <div className=\"header\">\n            <h1>{situation.header} </h1>\n            <div className=\"modal-close\" onClick={() => handleClose()}></div>\n          </div>\n          <div className=\"banner\">\n\n          </div>\n          <p>\n              {situation.description}\n          </p>\n          <ul className=\"options\">\n            {situation.options.map((option, index) => (\n              <li key={option} className={index === selectedOption ? \"active\" : \"\"} onClick={() => selectOption(index)} >\n                <div className=\"checkbox\">\n                  <CheckSvg className=\"check\" />\n                </div>\n                <div>\n                  {option}\n                </div>\n              </li>\n            ))}\n          </ul>\n          <div className=\"control\">\n            { !warningShown && (\n              <button disabled={selectedOption === null} onClick={() => setWarningShown(true)}>\n                <b>Okay</b>\n              </button>\n            )}\n            { warningShown && (\n              <>\n                <button disabled={selectedOption === null} onClick={() => handleConfirm()}>\n                  <b>I'm sure</b>\n                </button>\n                <button disabled={selectedOption === null} onClick={() => handleClose()}>\n                  Never mind\n                </button>\n                <div className=\"warning\">\n                  {selectedOption !== null && (\n                  <span>\n                    Are you sure you want to deal with this situation at this time?\n                    This means you prioritize this situation over any still active situations.\n                  </span>)}\n                </div>\n              </>\n            )}\n          </div>\n        </>\n      )}\n    </Modal>  \n  )\n}\n\nexport default SituationModal;\n\n","import React, { useRef, useEffect, useState } from 'react';\nimport Situations from '../content/situations.json';\nimport { ISituations } from '../common/constants';\n\nimport './situationOrder.css';\n\ninterface Props {\n  situationOrder: string[]\n}\n\nconst SituationOrder = (props: Props) => {\n  const {situationOrder} = props;\n\n  if (!situationOrder.length) {\n    return null;\n  }\n\n  return (\n    <div className=\"situation-order\">\n      <p>\n        <b>Issues are solved in this order:</b>\n      </p>\n      <ol>\n        {situationOrder.map((name) => {\n          const situation = (Situations as ISituations)[name];\n          return <li key={name}>{situation.header}</li>;\n        })}\n      </ol>\n    </div>\n\n  )\n}\n\nexport default SituationOrder;","import React, { useRef, useEffect, useState } from 'react';\nimport * as PIXI from 'pixi.js';\nimport { Stage, Sprite } from '@inlet/react-pixi';\nimport Viewport from './components/pixi/Viewport';\nimport { Viewport as PixiViewport } from \"pixi-viewport\";\nimport Marker from './components/pixi/Marker';\nimport { PixiPlugin } from 'gsap/all';\nimport { gsap } from 'gsap'\nimport SituationModal from './components/SituationModal';\nimport SituationOrder from './components/SituationOrder';\n\nimport './App.css';\n\nPixiPlugin.registerPIXI(PIXI);\ngsap.registerPlugin(PixiPlugin);\n\nif (process.env.NODE_ENV === \"development\") {\n  // @ts-ignore\n  window.__PIXI_INSPECTOR_GLOBAL_HOOK__ && window.__PIXI_INSPECTOR_GLOBAL_HOOK__.register({ PIXI: PIXI });\n}\n\nfunction App() {\n  const viewportRef = useRef<PixiViewport>(null);\n  const [selectedSituation, selectSituation] = useState<string | null>(null);\n  const [situationOrder, setsituationOrder] = useState<string[]>([]);\n\n  const worldWidth = 1920;\n  const worldHeight = 1278;\n  \n  const [canvasWidth, setCanvasWidth] = useState(1200);\n  const [canvasHeight, setCanvasHeight] = useState(600);\n\n  useEffect(() => {\n    // This will set the dimensions of the canvas to that of the window\n    const resize = () => {\n        setCanvasWidth(window.screen.width);\n        setCanvasHeight(window.screen.height); \n    }\n    resize();\n\n    window.addEventListener(\"resize\", resize);\n    return () => {\n        window.removeEventListener(\"resize\", resize);\n    };\n  }, []);\n\n  useEffect(() => {\n    // Center the map\n    if (viewportRef.current) {\n      const viewport = viewportRef.current;\n      viewport.moveCenter(worldWidth / 2, worldHeight / 2);  \n    }\n  }, [canvasWidth, canvasHeight]);\n\n  useEffect(() => {\n    // Blur the map when situation is selected\n    if (selectedSituation) {\n      gsap.to(viewportRef.current, {duration: .5, pixi: {blur:20}});\n    } else {\n      gsap.to(viewportRef.current, {duration: .5, pixi: {blur:0}});\n    }\n  }, [selectedSituation]);\n\n  const handleMarkerClick = (situation: string) => {\n    selectSituation(situation);\n  }\n\n  const handleClose = () => {\n    selectSituation(null);\n  }\n\n  const handleChooseOption = (option: number) => {\n    setsituationOrder([\n      ...situationOrder,\n      selectedSituation!\n    ])\n  }\n\n  const renderMarker = (situation: string, position: PIXI.Point, delay: number) => {\n    if (situationOrder.some(s => s === situation)) {\n      return null;\n    }\n    return <Marker position={position} pointerdown={() => handleMarkerClick(situation)} delay={delay} />\n  }\n\n  return (\n    <>\n      <Stage width={canvasWidth} height={canvasHeight} >\n        <Viewport screenWidth={canvasWidth} screenHeight={canvasHeight} worldWidth={worldWidth} worldHeight={worldHeight} ref={viewportRef} >\n          <Sprite image={`${process.env.PUBLIC_URL}/map.png`}  interactive={true}/>\n          {renderMarker('fire', new PIXI.Point(440, 449), 0.5)}\n          {renderMarker('theft', new PIXI.Point(986, 724), 1)}\n          {renderMarker('absenteeism', new PIXI.Point(1437, 447), 1.5)}\n      </Viewport>\n    </Stage>\n    <SituationOrder situationOrder={situationOrder} />\n    { selectedSituation && <SituationModal situationId={selectedSituation} onClose={handleClose} onOptionChosen={handleChooseOption} /> }\n    </>  \n  )\n};\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}