{"version":3,"sources":["components/pixi/Viewport.tsx","components/pixi/Marker.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Viewport","React","forwardRef","props","ref","app","useApp","cursor","process","renderer","plugins","interaction","cursorStyles","pointer","PixiComponentViewport","PixiComponent","create","viewport","PixiViewport","screenWidth","screenHeight","worldWidth","worldHeight","ticker","on","event","onClick","drag","pinch","wheel","clamp","direction","clampZoom","minScale","maxScale","decelerate","PixiPlugin","registerPIXI","PIXI","gsap","registerPlugin","Marker","useRef","data","useState","position","setPosition","useEffect","from","current","duration","ease","pixi","visible","scale","delay","onDragStart","stopPropagation","onDragEnd","undefined","console","log","onDragMove","newPosition","getLocalPosition","parent","anchor","interactive","image","mousedown","touchstart","mouseup","mouseupoutside","mousemove","touchmove","App","viewportRef","situationSelected","selectSituation","canvasWidth","setCanvasWidth","canvasHeight","setCanvasHeight","resize","window","innerWidth","innerHeight","addEventListener","removeEventListener","moveCenter","to","blur","openSituation","Situations","width","height","pointerdown","isOpen","ariaHideApp","overlayClassName","className","onRequestClose","header","description","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2lBAgBMA,EAAWC,IAAMC,YAA8B,SAACC,EAAOC,GAC3D,IAAMC,EAAMC,mBACZ,GAAID,EAAK,CAEL,IAAME,EAAM,eAAWC,GAAX,qDACZH,EAAII,SAASC,QAAQC,YAAYC,aAAaC,QAAUN,EAE5D,OAAO,kBAACO,EAAD,eAAuBT,IAAKA,GAASF,EAArC,CAA4CC,IAAKA,QAOpDU,EAAwBC,wBAAc,WAAY,CACtDC,OAAQ,SAACb,GACP,IAAMc,EAAW,IAAIC,IAAa,CAChCC,YAAahB,EAAMgB,YACnBC,aAAcjB,EAAMiB,aACpBC,WAAYlB,EAAMkB,WAClBC,YAAanB,EAAMmB,YACnBC,OAAQpB,EAAME,IAAIkB,OAClBZ,YAAaR,EAAME,IAAII,SAASC,QAAQC,cAe1C,OAZAM,EAASO,GAAG,WAAW,SAACC,GAAetB,EAAMuB,SAASvB,EAAMuB,QAAQD,MAIpER,EACGU,OACAC,QACAC,QACAC,MAAM,CAAEC,UAAW,QACnBC,UAAU,CAAEC,SAAU,EAAGC,SAAU,IACnCC,aAEIlB,KAYIjB,I,gBC3DfoC,IAAWC,aAAaC,GACxBC,IAAKC,eAAeJ,KAOpB,IA0DeK,EA1DA,SAACtC,GACZ,IAAMC,EAAMsC,iBAAoB,MAE1BC,GADMrC,mBACCoC,oBAHsD,EAInCE,mBAAqBzC,EAAM0C,UAAY,IAAIP,SAJR,mBAI5DO,EAJ4D,KAIlDC,EAJkD,KAMnEC,qBAAU,WAENR,IAAKS,KAAK5C,EAAI6C,QAAS,CACrBC,SAAU,EACVC,KAAM,sBACNC,KAAM,CACJC,SAAS,EACTC,MAAO,MAERC,MAAMpD,EAAMoD,OAAS,KACzB,CAACpD,EAAMoD,QAEV,IAAMC,EAAc,SAAC/B,GAIjBkB,EAAKM,QAAUxB,EAAMkB,KACrBlB,EAAMgC,mBAGJC,EAAY,WACdf,EAAKM,aAAUU,EACfC,QAAQC,IAAIhB,IAGhB,SAASiB,IAEL,GAAInB,EAAKM,QACT,CACI,IAAMc,EAAcpB,EAAKM,QAAQe,iBAAiB5D,EAAI6C,QAASgB,QAC/DnB,EAAYiB,IAIpB,OACI,kBAAC,SAAD,iBACS5D,EADT,CAEI+D,OAAQ,CAAC,GAAK,IACdrB,SAAUA,EACVzC,IAAKA,EACL+D,aAAa,EACbC,MAAK,UAAK5D,GAAL,eACL6D,UAAWb,EACXc,WAAYd,EACZe,QAASb,EACTc,eAAgBd,EAChBe,UAAWX,EACXY,UAAWZ,M,yBCvDvB1B,IAAWC,aAAaC,GACxBC,IAAKC,eAAeJ,KAuFLuC,MA7Ef,WACE,IAAMC,EAAclC,iBAAqB,MAD5B,EAEgCE,qBAFhC,mBAENiC,EAFM,KAEaC,EAFb,OAQyBlC,mBAAS,MARlC,mBAQNmC,EARM,KAQOC,EARP,OAS2BpC,mBAAS,KATpC,mBASNqC,EATM,KASQC,EATR,KAWbnC,qBAAU,WAER,IAAMoC,EAAS,WACXH,EAAeI,OAAOC,YACtBH,EAAgBE,OAAOE,cAI3B,OAFAH,IACAC,OAAOG,iBAAiB,SAAUJ,GAC3B,WACHC,OAAOI,oBAAoB,SAAUL,MAE1C,IAEDpC,qBAAU,WACJ6B,EAAY3B,SACG2B,EAAY3B,QACpBwC,WAAWpE,IAAgBC,OAErC,CAACyD,EAAaE,IAEjBlC,qBAAU,WAEJ8B,EACFtC,IAAKmD,GAAGd,EAAY3B,QAAS,CAACC,SAAU,GAAIE,KAAM,CAACuC,KAAK,MAExDpD,IAAKmD,GAAGd,EAAY3B,QAAS,CAACC,SAAU,GAAIE,KAAM,CAACuC,KAAK,OAEzD,CAACd,IAEJ,IAAMe,EAAgBf,EAAqBgB,EAA0BhB,GAAqB,KAE1F,OACE,oCACE,kBAAC,QAAD,CAAOiB,MAAOf,EAAagB,OAAQd,GACjC,kBAAC,EAAD,CAAU9D,YAAa4D,EAAa3D,aAAc6D,EAAc5D,WAzCnD,KAyC2EC,YAxC1E,KAwCoGlB,IAAKwE,GACrH,kBAAC,SAAD,CAAQR,MAAK,UAAK5D,GAAL,YAAuCwF,YAAa,kBAAMlB,OAAgBnB,IAAYQ,aAAa,IAEhH,kBAAC,EAAD,CAAQtB,SAAU,IAAIP,QAAW,IAAK,KAAM0D,YAAa,kBAAMlB,EAAgB,SAASvB,MAAO,KAC/F,kBAAC,EAAD,CAAQV,SAAU,IAAIP,QAAW,IAAK,KAAM0D,YAAa,kBAAMlB,EAAgB,UAAUvB,MAAO,IAChG,kBAAC,EAAD,CAAQV,SAAU,IAAIP,QAAW,KAAM,KAAM0D,YAAa,kBAAMlB,EAAgB,gBAAgBvB,MAAO,QAG7G,kBAAC,IAAD,CACI0C,YAA8BtC,IAAtBkB,EACRqB,aAAa,EACbC,iBAAkB,gBAElBC,UAAW,gBAEXC,eAAgB,kBAAMvB,OAAgBnB,KAEpCkB,GACA,oCACE,4BAAKe,EAAeU,OAApB,KACA,yBAAKF,UAAU,cAAc1E,QAAS,kBAAMoD,OAAgBnB,MAC5D,2BACKiC,EAAeW,iBC9EZC,QACW,cAA7BpB,OAAOqB,SAASC,UAEe,UAA7BtB,OAAOqB,SAASC,UAEhBtB,OAAOqB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5D,QAAQ4D,MAAMA,EAAMC,c","file":"static/js/main.33868113.chunk.js","sourcesContent":["import React from \"react\";\nimport { Viewport as PixiViewport, ClickEventData } from \"pixi-viewport\";\nimport { PixiComponent, useApp } from \"@inlet/react-pixi\";\n\ninterface Props {\n  children: React.ReactNode;\n  onClick?(event: ClickEventData): void;\n  screenWidth: number,\n  screenHeight: number,\n  worldWidth: number,\n  worldHeight: number,\n}\n\n/** Viewport leverages pixi-viewport to create a pannable map \n * https://davidfig.github.io/pixi-viewport/jsdoc/\n */\nconst Viewport = React.forwardRef<PixiViewport, any>((props, ref) => {\n  const app = useApp();\n  if (app) {\n      // Perhaps this is better moved somewhere else\n      const cursor = `url('${process.env.PUBLIC_URL}/img/cursors/dwarven_gauntlet_extra_6.png'), auto`;\n      app.renderer.plugins.interaction.cursorStyles.pointer = cursor;\n  }\n  return <PixiComponentViewport app={app} {...props} ref={ref} />;  \n})\n\ninterface PixiComponentProps {\n    app: PIXI.Application;\n}\n\nconst PixiComponentViewport = PixiComponent(\"Viewport\", {\n  create: (props: PixiComponentProps & Props) => {\n    const viewport = new PixiViewport({\n      screenWidth: props.screenWidth,\n      screenHeight: props.screenHeight,\n      worldWidth: props.worldWidth,\n      worldHeight: props.worldHeight,\n      ticker: props.app.ticker,\n      interaction: props.app.renderer.plugins.interaction,\n      // the interaction module is important for wheel to work properly when renderer.view is placed or scaled\n    });\n    viewport.on(\"clicked\", (event) => { if(props.onClick) props.onClick(event) });\n    //viewport.on(\"drag-start\", () => console.log(\"drag-start\"));\n    //viewport.on(\"drag-end\", () => console.log(\"drag-end\"));\n\n    viewport\n      .drag()\n      .pinch()\n      .wheel()\n      .clamp({ direction: 'all' })\n      .clampZoom({ minScale: 1, maxScale: 2 })\n      .decelerate();\n\n    return viewport;\n  },\n  // applyProps: (instance, oldProps, newProps) => {\n  //   console.log(\"applyProps\");\n  // },\n  // didMount: () => {\n  //   console.log(\"didMount\");\n  // },\n  // willUnmount: () => {\n  //   console.log(\"willUnmount\");\n  // }\n});\nexport default Viewport;\n","import React, { useRef, useEffect, useState } from 'react';\nimport { Sprite, useApp } from '@inlet/react-pixi';\nimport * as PIXI from 'pixi.js';\nimport { PixiPlugin } from 'gsap/all';\nimport { gsap } from 'gsap'\n\nPixiPlugin.registerPIXI(PIXI);\ngsap.registerPlugin(PixiPlugin);\n\ninterface Props {\n    position?: PIXI.Point;\n    delay?: number; // Wait this long before showing\n}\n\nconst Marker = (props: Props & React.ComponentProps<typeof Sprite>) => {\n    const ref = useRef<PIXI.Sprite>(null);\n    const app = useApp();\n    const data = useRef<PIXI.interaction.InteractionData>();\n    const [position, setPosition] = useState<PIXI.Point>(props.position || new PIXI.Point());\n\n    useEffect(() => {\n        // Pop in animation!\n        gsap.from(ref.current, { \n          duration: 1,\n          ease: \"elastic.out(2, 0.5)\",\n          pixi: { \n            visible: false,\n            scale: .1, \n          }\n        }).delay(props.delay || 0);\n    }, [props.delay]);\n\n    const onDragStart = (event: PIXI.interaction.InteractionEvent) => {\n        // store a reference to the data\n        // the reason for this is because of multitouch\n        // we want to track the movement of this particular touch\n        data.current = event.data;\n        event.stopPropagation(); // Stop dragging the map!\n    }\n    \n    const onDragEnd = () => {\n        data.current = undefined;\n        console.log(position);\n    }\n    \n    function onDragMove()\n    {\n        if (data.current)\n        {\n            const newPosition = data.current.getLocalPosition(ref.current!.parent);\n            setPosition(newPosition);\n        }\n    }\n    \n    return (\n        <Sprite \n            { ...props }\n            anchor={[0.5, 0.5]}\n            position={position}\n            ref={ref}\n            interactive={true}\n            image={`${process.env.PUBLIC_URL}/marker.svg`}\n            mousedown={onDragStart}\n            touchstart={onDragStart}\n            mouseup={onDragEnd}\n            mouseupoutside={onDragEnd}\n            mousemove={onDragMove}\n            touchmove={onDragMove}\n        />\n    );\n}\n\nexport default Marker;","import React, { useRef, useEffect, useState } from 'react';\nimport * as PIXI from 'pixi.js';\nimport './App.css';\nimport { Stage, Sprite } from '@inlet/react-pixi';\nimport Viewport from './components/pixi/Viewport';\nimport { Viewport as PixiViewport } from \"pixi-viewport\";\nimport Marker from './components/pixi/Marker';\nimport { PixiPlugin } from 'gsap/all';\nimport { gsap } from 'gsap'\nimport Modal from 'react-modal';\nimport Situations from './content/situations.json';\n\nPixiPlugin.registerPIXI(PIXI);\ngsap.registerPlugin(PixiPlugin);\n\n//window.PIXI = PIXI;\n\nif (process.env.NODE_ENV === \"development\") {\n  // @ts-ignore\n  window.__PIXI_INSPECTOR_GLOBAL_HOOK__ && window.__PIXI_INSPECTOR_GLOBAL_HOOK__.register({ PIXI: PIXI });\n}\n\n\nfunction App() {\n  const viewportRef = useRef<PixiViewport>(null);\n  const [situationSelected, selectSituation] = useState<string>();\n\n  const worldWidth = 1920;\n  const worldHeight = 1278;\n  \n  \n  const [canvasWidth, setCanvasWidth] = useState(1200);\n  const [canvasHeight, setCanvasHeight] = useState(600);\n\n  useEffect(() => {\n    // This will set the dimensions of the canvas to that of the window\n    const resize = () => {\n        setCanvasWidth(window.innerWidth);\n        setCanvasHeight(window.innerHeight); \n    }\n    resize();\n    window.addEventListener(\"resize\", resize);\n    return () => {\n        window.removeEventListener(\"resize\", resize);\n    };\n}, []);\n\n  useEffect(() => {\n    if (viewportRef.current) {\n      const viewport = viewportRef.current;\n      viewport.moveCenter(worldWidth / 2, worldHeight / 2);  \n    }\n  }, [canvasWidth, canvasHeight]);\n\n  useEffect(() => {\n    // Blur the map when situation is selected\n    if (situationSelected) {\n      gsap.to(viewportRef.current, {duration: .5, pixi: {blur:20}});\n    } else {\n      gsap.to(viewportRef.current, {duration: .5, pixi: {blur:0}});\n    }\n  }, [situationSelected]);\n\n  const openSituation = situationSelected ? (Situations as Situations)[situationSelected] : null;\n\n  return (\n    <>\n      <Stage width={canvasWidth} height={canvasHeight} >\n        <Viewport screenWidth={canvasWidth} screenHeight={canvasHeight} worldWidth={worldWidth} worldHeight={worldHeight} ref={viewportRef} >\n          <Sprite image={`${process.env.PUBLIC_URL}/map.png`} pointerdown={() => selectSituation(undefined)} interactive={true}/>\n\n          <Marker position={new PIXI.Point(440, 449)} pointerdown={() => selectSituation('fire')} delay={.5} />\n          <Marker position={new PIXI.Point(986, 724)} pointerdown={() => selectSituation('theft')} delay={1} />\n          <Marker position={new PIXI.Point(1437, 447)} pointerdown={() => selectSituation('absenteeism')} delay={1.5} />\n      </Viewport>\n    </Stage>\n    <Modal\n        isOpen={situationSelected !== undefined}\n        ariaHideApp={false}\n        overlayClassName={\"modal-overlay\"}\n\n        className={\"modal-content\"}\n        // onAfterOpen={afterOpenModal}\n        onRequestClose={() => selectSituation(undefined)}\n      >\n        { situationSelected && (\n          <>\n            <h1>{openSituation!.header} </h1>\n            <div className=\"modal-close\" onClick={() => selectSituation(undefined)}></div>\n            <p>\n                {openSituation!.description}\n            </p>\n          </>\n        )}\n    </Modal>\n\n  </>\n  );\n}\n\nexport default App;\n\ninterface Situations {\n  [name: string]: Situation\n}\n\ninterface Situation {\n  header: string;\n  description: string;\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}